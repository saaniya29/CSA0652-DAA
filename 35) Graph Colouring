#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 100
struct Graph {
    int V, adj[MAX_VERTICES][MAX_VERTICES];};
void initGraph(struct Graph *G, int V) {
    G->V = V;
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) { G->adj[i][j] = 0;}}}
void addEdge(struct Graph *G, int u, int v) {
    G->adj[u][v] = 1; G->adj[v][u] = 1; }
void printSolution(int color[], int V) {
    printf("Vertex\tColor\n");
    for (int i = 0; i < V; i++) {
        printf("%d\t%d\n", i, color[i]);}}
bool isSafe(struct Graph *G, int v, int color[], int c) {
    for (int i = 0; i < G->V; i++) {
        if (G->adj[v][i] && c == color[i]) { return false;}}
    return true;}
void graphColoring(struct Graph *G, int m) {
    int color[MAX_VERTICES];
    for (int i = 0; i < G->V; i++) { color[i] = 0;}
    for (int v = 1; v < G->V; v++) {
        for (int c = 1; c <= m; c++) {
            if (isSafe(G, v, color, c)) {
                color[v] = c;
                break;}}}
    printSolution(color, G->V);}
int main() {
    struct Graph G;
    int V, E; 
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);
    initGraph(&G, V);
    printf("Enter %d edges (format: u v):\n", E);
    for (int i = 0; i < E; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(&G, u, v);}
    int m;
    printf("Enter the number of colors: ");
    scanf("%d", &m);
    graphColoring(&G, m);
    return 0;}
