#include <stdio.h>
#include <stdbool.h>
#define MAX_VERTICES 100
int n, graph[MAX_VERTICES][MAX_VERTICES], path[MAX_VERTICES];
bool isSafe(int v, int pos, int path[]) {
    if (graph[path[pos - 1]][v] == 0) { return false;}
    for (int i = 0; i < pos; ++i) {
        if (path[i] == v) {
            return false;}}
    return true;}
bool hamiltonianCircuitUtil(int path[], int pos) {
    if (pos == n) {
        if (graph[path[pos - 1]][path[0]] == 1) { return true; }
		else { return false; }}
    for (int v = 1; v < n; ++v) {
        if (isSafe(v, pos, path)) {
            path[pos] = v; 
            if (hamiltonianCircuitUtil(path, pos + 1)) {return true;}
            path[pos] = -1;}}
    return false; }
void hamiltonianCircuit() {
    int path[MAX_VERTICES];
    for (int i = 0; i < n; ++i) {
        path[i] = -1;}
    path[0] = 0;
    if (hamiltonianCircuitUtil(path, 1) == false) {
        printf("No Hamiltonian Circuit exists.\n");
        return;}
    printf("Hamiltonian Circuit found: ");
    for (int i = 0; i < n; ++i) { printf("%d ", path[i]);}
    printf("%d\n", path[0]); }
int main() {
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            scanf("%d", &graph[i][j]);}}
    hamiltonianCircuit();
    return 0;}
